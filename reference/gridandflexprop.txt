 Summary of Commonly Used CSS Grid and Flex Properties

CSS Grid and Flexbox are both powerful layout systems in CSS that allow for creating complex and responsive designs. Below are some of the most commonly used properties for both systems, along with explanations and syntax examples.



 CSS Grid

CSS Grid Layout provides a twodimensional layout system (rows and columns), which makes it easier to design complex layouts.

 1. display: grid
    Defines the container as a grid.
   css
   .container {
     display: grid;
   }
   

 2. gridtemplatecolumns and gridtemplaterows
    Defines the size of columns and rows.
   css
   .container {
     display: grid;
     gridtemplatecolumns: 200px 1fr 200px; /* 3 columns, fixed width and flexible */
     gridtemplaterows: auto 100px; /* 2 rows, second row is 100px */
   }
   

 3. gridgap (or gap)
    Sets the space between grid items (both rows and columns).
   css
   .container {
     display: grid;
     gap: 20px; /* 20px gap between all items */
   }
   

 4. gridcolumn and gridrow
    These properties define how an item should span across columns and rows.
   css
   .item {
     gridcolumn: 2 / 4; /* Spans from column 2 to column 4 */
     gridrow: 1 / 3; /* Spans from row 1 to row 3 */
   }
   

 5. gridtemplateareas
    Allows you to define a grid layout using named areas.
   css
   .container {
     display: grid;
     gridtemplateareas: 
       "header header header"
       "sidebar content content"
       "footer footer footer";
   }
   .header { gridarea: header; }
   .sidebar { gridarea: sidebar; }
   .content { gridarea: content; }
   .footer { gridarea: footer; }
   

 6. alignitems and justifyitems
    Controls the alignment of items within their grid cell.
   css
   .container {
     display: grid;
     alignitems: center; /* Vertically centers grid items */
     justifyitems: center; /* Horizontally centers grid items */
   }
   

 7. alignself and justifyself
    Overrides the alignment for individual grid items.
   css
   .item {
     alignself: end; /* Aligns the item to the bottom of the cell */
     justifyself: start; /* Aligns the item to the left of the cell */
   }
   



 CSS Flexbox

Flexbox is a onedimensional layout system for aligning items along a row or column. 
It’s simpler than Grid for simpler layouts 
but can be used for more complex designs as well.

 1. display: flex
    Defines the container as a flexbox.
   css
   .container {
     display: flex;
   }
   

 2. flexdirection
    Defines the direction of the main axis (row or column).
   css
   .container {
     flexdirection: row; /* Items are aligned in a row (default) */
     flexdirection: column; /* Items are aligned in a column */
   }
   

 3. justifycontent
    Aligns items along the main axis (horizontal by default).
   css
   .container {
     justifycontent: flexstart; /* Items start at the left (default) */
     justifycontent: center; /* Items are centered */
     justifycontent: spacebetween; /* Items are spaced out evenly */
     justifycontent: spacearound; /* Items are spaced out with space around them */
   }
   

 4. alignitems
    Aligns items along the cross axis (vertical by default).
   css
   .container {
     alignitems: flexstart; /* Aligns items to the top */
     alignitems: center; /* Centers items vertically */
     alignitems: stretch; /* Stretch items to fill the container (default) */
   }
   

 5. alignself
    Overrides the alignitems value for individual flex items.
   css
   .item {
     alignself: flexend; /* Aligns the item to the bottom */
   }
   

 6. flexwrap
    Allows flex items to wrap onto multiple lines if necessary.
   css
   .container {
     flexwrap: wrap; /* Items wrap to the next line if needed */
   }
   

 7. flexgrow, flexshrink, and flexbasis
    These control how items grow, shrink, and their initial size.
   css
   .item {
     flexgrow: 1; /* The item can grow to take up remaining space */
     flexshrink: 0; /* The item will not shrink */
     flexbasis: 100px; /* The item starts with a width of 100px */
   }
   

 8. order
    Changes the visual order of flex items.
   css
   .item {
     order: 2; /* This item will appear second */
   }
   

 9. flex
    A shorthand for combining flexgrow, flexshrink, and flexbasis.
   css
   .item {
     flex: 1 0 100px; /* Can grow, won’t shrink, starts at 100px */
   }
   



 Comparison Between Grid and Flexbox

 Grid is ideal for creating twodimensional layouts (rows and columns) and provides more
  control over large, complex designs.
 Flexbox is better for onedimensional layouts, either a row or column, and is great for
  distributing space within an item container.

Both systems can be used together, with Grid for overall structure and Flexbox for
 aligning smaller elements within grid items.